{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/post/211201/typescript_basic2/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3>1. primitive 타입</h3>\n<p>원시 데이터 타입 <strong>number, string, boolean</strong> 을 명시적으로 설정하기</p>\n<deckgo-highlight-code language=\"ts\" theme=\"material\"  >\n          <code slot=\"code\">let id: number = 1\r\nlet name: string = &#39;leesky&#39;\r\nlet isAdmin: boolean = false</code>\n        </deckgo-highlight-code>\n<h3>2. any 타입</h3>\n<p>동적 형 지정 언어 Javascript는 선언된 변수에 어떠한 값이든 재할당 가능하다.\r\n하지만 Typescript는 명시적으로 데이터 유형을 설정해 정적 형 지정 언어로 타입을\r\n지정해 사용하는 것을 권장한다.</p>\n<p>하지만 어떤 타입을 할당해야 할지 모르는 경우에는 어떤 타입이든 할당이 가능한\r\nany 타입을 설정가능하다.</p>\n<deckgo-highlight-code language=\"ts\" theme=\"material\"  >\n          <code slot=\"code\">//명시적 any 타입 지정\r\nlet id: any = 123\r\nid = &#39;leesky&#39; // any 타입이라서 가능\r\n\r\n//암시적 any 타입 지정\r\nlet name\r\nname = 123\r\nname = &#39;leesky&#39;</code>\n        </deckgo-highlight-code>\n<h3>3. array 타입</h3>\n<p>암시적 타입 지정으로 생성한 string 배열 타입에 다른 값을 넣으면 에러가 발생한다. 이외에도 <strong>Array&#x3C;T></strong> 으로 지정하는 방법도 있는데 나중에 다루도록 함</p>\n<deckgo-highlight-code language=\"ts\" theme=\"material\"  >\n          <code slot=\"code\">// 암시적으로 string 배열 지정\r\nlet users = [&#39;leesky&#39;, &#39;leesky2&#39;, &#39;leesky3&#39;]\r\n//  이건 에러가남 &gt;&gt; users = [1, 2, 3, 4]\r\n\r\n// 명시적 array 타입 지정\r\nlet users2: string[] = [&#39;leesky&#39;, &#39;leesky2&#39;, &#39;leesky3&#39;]\r\n\r\n// 명시적으로 복합 배열 지정\r\nlet users3: any[] = [1, 2, &#39;leesky&#39;, 3, true, { name: &#39;leesky&#39; }]\r\n// 배열이 아닌 다른 타입이면 에러가남&gt;&gt; users3 = { name: &#39;leesky&#39; }\r\n\r\n// 가능한 테이터 타입 지정\r\nlet users4: (number | string)[] = [&#39;leesky&#39;, 23]\r\n\r\n//암시적 any 타입에는 any 복합 배열도 됨\r\nlet temp\r\ntemp = [1, 2, 23, [], {}]</code>\n        </deckgo-highlight-code>\n<h3>4. tuple 타입</h3>\n<p>tuple은 javascript에는 없지만, Typescript에서 배열 타입을 보다 특수하게 사용할 수 있도록 지원한다. <strong>tuple에 명시적으로 지정된 형식에 따라 아이템 순서를 설정해야하고, 추가되는 아이템 또한 tuple에 명시된 타입만 사용 가능하다</strong></p>\n<deckgo-highlight-code language=\"ts\" theme=\"material\"  >\n          <code slot=\"code\">let user: [string, number] = [&#39;leesky&#39;, 24]\r\n/* \r\n처음 할당할떄\r\n더 많이 하거나 타입이 틀리면 에러!\r\n    user = [&#39;leesky&#39;, 23, 24] =&gt; error!\r\n    user = [23, &#39;leesky&#39;] error!\r\n*/\r\n//이후에 push 는 명시된 타입만 추가가능 (순서는 상관없음)\r\nuser.push(&#39;323&#39;, 2323, &#39;3211&#39;, 23) //가능\r\n\r\n/*재할당이나 처음할당할떄는, 명시된 타입보다 더 많거나, 타입이 틀리면 에러!\r\nerror! Target requires 2 element(s) but source may have fewer.\r\nuser = user.map(item =&gt; {\r\n  return (typeof item === &#39;number&#39;) ? item * 2 : item\r\n})\r\n*/</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>나는 평소에 tuple을 튜플이라고 발음하는데 튜플은 영국식 발음이고\r\n미국에서는 터플, 호주에서는 투플이라고 발음한다고 한다.</p>\n</blockquote>\n<p>튜플이해하기 예제</p>\n<deckgo-highlight-code language=\"ts\" theme=\"material\"  >\n          <code slot=\"code\">let admin: [{ name: string; age: number }, boolean] = [\r\n  {\r\n    name: &#39;leesky&#39;,\r\n    age: 23,\r\n  },\r\n  true,\r\n]</code>\n        </deckgo-highlight-code>\n<h3>5. enum 타입</h3>\n<p>Typescript는 enum 열거형 데이터 타입을 지원한다. 멤버라 불리는 명명된\r\n값의 집합을 이루는 자료형으로 기억하기 어려운 숫자 대신 이름으로 접근 및\r\n사용하기 위해 활용한다. <br><br></p>\n<p><strong>열거된 각 멤버는 별도의 값이 설정되지 않은 경우 기본적으로 0부터 시작</strong></p>\n<deckgo-highlight-code language=\"ts\" theme=\"material\"  >\n          <code slot=\"code\">enum Family {\r\n  Daddy, // 0\r\n  Mommy, // 1\r\n  Sister, // 2\r\n  Leesky, // 3\r\n}\r\nlet leesky: number = Family.Leesky //(enum member) Family.Leesky = 3</code>\n        </deckgo-highlight-code>\n<br>\n<p><strong>값을 직접 설정할 수도 있음! 단 값이 할당되지 않은 아이템은 이전 아이템\r\n값 + 1된 값이 설정됨!!!</strong></p>\n<deckgo-highlight-code language=\"ts\" theme=\"material\"  >\n          <code slot=\"code\">enum Family {\r\n  Daddy = 3,\r\n  Mommy, // 4\r\n  Sister, //5\r\n  Leesky, //6\r\n}</code>\n        </deckgo-highlight-code>\n<br>\n<p><strong>숫자값을 통해서 enum 멤버 이름을 도출가능함!!</strong></p>\n<deckgo-highlight-code language=\"ts\" theme=\"material\"  >\n          <code slot=\"code\">let whatIsMyname: string = Family[6] // &#39;Leesky&#39;</code>\n        </deckgo-highlight-code>\n<br>\n<h4>참고</h4>\n<ul>\n<li><a href=\"https://yamoo9.gitbook.io/typescript/\" target=\"_blank\" rel=\"nofollow\">Typescript 가이드북</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-primitive-%ED%83%80%EC%9E%85\">1. primitive 타입</a></p>\n</li>\n<li>\n<p><a href=\"#2-any-%ED%83%80%EC%9E%85\">2. any 타입</a></p>\n</li>\n<li>\n<p><a href=\"#3-array-%ED%83%80%EC%9E%85\">3. array 타입</a></p>\n</li>\n<li>\n<p><a href=\"#4-tuple-%ED%83%80%EC%9E%85\">4. tuple 타입</a></p>\n</li>\n<li>\n<p><a href=\"#5-enum-%ED%83%80%EC%9E%85\">5. enum 타입</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Typescript 기본기 다지기(2)","summary":"Typescript primitive, any, array, tuple, enum 타입 알아보기!","date":"2021.12.01.","categories":["Typescript"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#3878c8","images":{"fallback":{"src":"/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/5371e/typescript.png","srcSet":"/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/24271/typescript.png 56w,\n/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/39d80/typescript.png 113w,\n/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/5371e/typescript.png 225w","sizes":"(min-width: 225px) 225px, 100vw"},"sources":[{"srcSet":"/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/d66a6/typescript.webp 56w,\n/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/a72fd/typescript.webp 113w,\n/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/1cf63/typescript.webp 225w","type":"image/webp","sizes":"(min-width: 225px) 225px, 100vw"}]},"width":225,"height":225}},"publicURL":"/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/typescript.png"}}}}]}},"pageContext":{"slug":"/post/211201/typescript_basic2/"}},
    "staticQueryHashes": []}