{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/post/211201/typescript_basic3/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3>1. 함수 매개변수 타입</h3>\n<p>tsconfig.json에 noImplicitAny 설정 값이 true 일 경우, 암시적인\r\nany 사용 시 오류가 난다.</p>\n<blockquote>\n<p>함수 매개변수에서만 해당사항이 있는것 같아보인다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//error! 암시적으로 id와 name 매개변수가 any로 지정되었음</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'leesky'</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">//명시적으로 함수 매개변수 타입 사용 방법</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. union 타입</h3>\n<p>id 매개 변수에 설정 가능한 타입 값을 number, string 모두 가능하게 하려면\r\n파이프(|) 를 사용하여 설정한다. 이를 유니온 타입이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. 함수 리턴 타입</h3>\n<p>void 는 결과 값을 반환하지 않는 함수에 설정한다. 반면 결과 값을\r\n반환하는 함수는 명시적으로 반환값 타입을 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDoubleNum</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">getStringNum</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>명시적으로 반환 값을 설정하지 않는 함수는 undefined를 반환하기에\r\nTypescript에서는 void를 명시한다.</p>\n<h3>4. 함수 식</h3>\n<p>변수에 함수 값을 할당하는 식은 컴파일 과정에서 오류를 발생시키지 않는다.</p>\n<blockquote>\n<p>직접 해본 결과 오류가 난다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 명시적으로 함수에 설정 가능한 타입을 정의하고자 하면\r\n다음과 같이 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//변수에 함수 매개변수, 리턴 타입에 대한 명시적 설정</span>\r\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\r\n\r\n<span class=\"token comment\">//대입하는 function 매개변수와 반환값 타입을 지정할 필요가 없음</span>\r\n<span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>변수에 명시적 타입 설정, 함수 값 할당 구문을 별도로 안나누고 한번에 정의가능</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello!! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ES6 화살표 함수 식을 사용하면 다음과 같이 기술할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">string</span> <span class=\"token operator\">=</span> name <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello!! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>5. Object 타입</h3>\n<p>typescript에서 변수에 초기 설정된 값을 암시적으로 할당 가능한 데이터 타입으로\r\n설정하기에 초기 설정된 값과 다른 형태로 할당될 경우 오류가 난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//아래와 같이 선언되면 암시적으로 {name:string, age:number} 타입으로 지정됨</span>\r\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'leesky'</span><span class=\"token punctuation\">,</span>\r\n  age<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">/* 아래와 같이 재할당 해버리면 에러남~~~\r\nobj = {\r\n  n: 'leesky',\r\n  a:23,\r\n  sayHello(){\r\n    alert('hello!');\r\n  }\r\n}\r\n\r\nobj = {\r\n  name: 23,\r\n  age: 'leesky',\r\n  } \r\n}\r\n\r\n*/</span></code></pre></div>\n<p>객체의 각 속성 타입을 명시하려면 아래와 같이 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\r\n  <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'leesky'</span><span class=\"token punctuation\">,</span>\r\n  age<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 타입으로 설정되지 않은 객체의 속성을 새롭게 추가할 경우\r\n에러가 난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// error!</span>\r\nobj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">newFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>새롭게 추가할 newFucntion 프로퍼티를 타입에 추가하면 되지만,\r\n매번 하기에는 번거롭다. 따라서 아래와 같이 하면 쉽게 프로퍼티를\r\n추가할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\r\n  <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\r\n  <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token comment\">// &lt;-- 이런 식으로 아무 속성을 추가할 수 있도록함</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'leesky'</span><span class=\"token punctuation\">,</span>\r\n  age<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nobj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">newFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'it is work!'</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>6. null/ undefined 타입</h3>\n<p>Javascript에서 null, undefiend도 데이터 타입이자 하나의 값으로 취급된다.\r\nTypescript에서도 하나의 타입으로 처리되며 다음과 같이 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> nullable<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\r\n<span class=\"token keyword\">let</span> undefinedabe<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></code></pre></div>\n<p>하지만 null로 명시적 타입이 설정된 변수에 null이 아닌 값이 할당되면\r\n오류가 난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//error!</span>\r\nnullable <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></code></pre></div>\n<blockquote>\n<p>tsconfig.json에 strictNullChecks가 true면 모든 데이터 타입은 null, undefiend를 할당 받을 수 없다. false면 null이나 undefined 가능</p>\n</blockquote>\n<p>이러한 문제를 해결하기위해서는 any 타입이나 유니온 타입을 사용할 수 있는데\r\n타입검사를 위해서는 유니온 타입을 쓰는게 적절할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> assign_name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">//가능</span>\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>assign_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  assign_name <span class=\"token operator\">=</span> <span class=\"token string\">'leesky'</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>7. never 타입</h3>\n<p>never는 일반적으로 함수 리턴 타입으로 사용된다. nerver 은 함수의 끝에 도달\r\n할 수 없다는 뜻이며, 함수의 리턴 타입으로 never 가 사용된 경우에는, 항상\r\n오류를 출력하거나 리턴 값을 절대 내보내지 않는 다는 뜻이다. (무한 루프)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//항상 오류 발생</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">invalid</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">{</span>\r\n  thorw <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// never 타입 추론</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">invalid</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// 무한 루프</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">infiniteAnimate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">infiniteAnimate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<p>never 타입을 지정한 변수에 never가 아닌 타입은 할당할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> neverType<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\r\n<span class=\"token comment\">// error! never 타입에 number 할당 불가</span>\r\nneverType <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\r\n\r\n<span class=\"token comment\">// 함수의 반환값이 never 타입이기 때문에 오류안남!</span>\r\n<span class=\"token comment\">// 이 경우는 조금 특이한데, 함수의 반환값이 익명 never 반환 함수이기</span>\r\n<span class=\"token comment\">// 때문에 throw new Error을 만나서 never 타입의 무언가를 반환하나보다.</span>\r\nneverType <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>8. 사용자 정의 타입</h3>\n<p>복잡한 타입을 매번 설정하는 것은 상당히 번거롭다.\r\n복잡한 타입을 사용자 정의하여 재사용하기 용이하도록 typescript는 지원한다.\r\n타입 별칭(type alias)을 정의 하려면 type 키워드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//너무 복잡하고 재사용하기도 힘들다!</span>\r\n<span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\r\n  isAdmin<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\r\n  family<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'leesky'</span><span class=\"token punctuation\">,</span>\r\n  age<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\r\n  isAdmin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n  family<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'daddy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mammy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sister'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n\r\n<span class=\"token comment\">//재사용하기도 쉽고 가독성도 좋다.</span>\r\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">userType</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\r\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\r\n  isAdmin<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span>\r\n  family<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\r\n\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span>userType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'leesky'</span><span class=\"token punctuation\">,</span>\r\n  age<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\r\n  isAdmin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n  family<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'daddy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mammy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sister'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>9. 타입 단언(Assertion)</h3>\n<p>Typescript 프로그래밍을 하다보면 타입 어설션(단언, Assertion)을 사용해야\r\n하는 순간이 온다. 타입 단언은 컴파일러에게 “이 타입이 특정 타입 임을 단언한다”\r\n라고 말하는 것과 같다.</p>\n<blockquote>\n<p>컴파일러보다 타입을 더 잘알고 있는 경우 타입 단언을 한다!</p>\n</blockquote>\n<p>다른 언어의 타입 캐스트(Cast)와 비슷하지만, <strong>특별한 검사나 데이터 재구성을\r\n수행하지 않는다</strong>. 런타임 시, 영향을 미치지 않으며 오직 컴파일 과정에서만 사용된다. 타입 단언을 처리하는 방법은 2가지이다.</p>\n<ol>\n<li>앵글 브라켓 <code class=\"language-text\">&lt;></code>문법을 사용하기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> assertion<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">'leesky'</span>\r\n<span class=\"token comment\">// assertion 변수의 타입을 &lt;string>으로 단언한다.</span>\r\n<span class=\"token comment\">// assertion string 타입임</span>\r\n<span class=\"token keyword\">let</span> assertion_count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length</code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">as</code> 문법 사용하기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> assertion<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">'leesky'</span>\r\n<span class=\"token comment\">// as를 통해 assertion 을 string으로 단언</span>\r\n<span class=\"token keyword\">let</span> assertion_count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>assertion <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length</code></pre></div>\n<blockquote>\n<p>타입 단언은 타입 캐스트와 비슷하지만, 특별한 검사, 데이터 재구성을 안한다\r\n는 점에 주목하자. 그리고 추가적으로 JSX 에서는 as 문법만 사용할 수 있다.</p>\n</blockquote>\n<h4>참고</h4>\n<ul>\n<li><a href=\"https://yamoo9.gitbook.io/typescript/\" target=\"_blank\" rel=\"nofollow\">Typescript 가이드북</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%ED%95%A8%EC%88%98-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85\">1. 함수 매개변수 타입</a></p>\n</li>\n<li>\n<p><a href=\"#2-union-%ED%83%80%EC%9E%85\">2. union 타입</a></p>\n</li>\n<li>\n<p><a href=\"#3-%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B4-%ED%83%80%EC%9E%85\">3. 함수 리턴 타입</a></p>\n</li>\n<li>\n<p><a href=\"#4-%ED%95%A8%EC%88%98-%EC%8B%9D\">4. 함수 식</a></p>\n</li>\n<li>\n<p><a href=\"#5-object-%ED%83%80%EC%9E%85\">5. Object 타입</a></p>\n</li>\n<li>\n<p><a href=\"#6-null-undefined-%ED%83%80%EC%9E%85\">6. null/ undefined 타입</a></p>\n</li>\n<li>\n<p><a href=\"#7-never-%ED%83%80%EC%9E%85\">7. never 타입</a></p>\n</li>\n<li>\n<p><a href=\"#8-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%ED%83%80%EC%9E%85\">8. 사용자 정의 타입</a></p>\n</li>\n<li>\n<p><a href=\"#9-%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8assertion\">9. 타입 단언(Assertion)</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Typescript 기본기 다지기(3)","summary":"Typescript function, union, void, object, null, underined, never, 사용자정의 타입, 타입단언 알아보기!","date":"2021.12.01.","categories":["Typescript"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#3878c8","images":{"fallback":{"src":"/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/5371e/typescript.png","srcSet":"/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/24271/typescript.png 56w,\n/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/39d80/typescript.png 113w,\n/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/5371e/typescript.png 225w","sizes":"(min-width: 225px) 225px, 100vw"},"sources":[{"srcSet":"/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/d66a6/typescript.webp 56w,\n/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/a72fd/typescript.webp 113w,\n/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/1cf63/typescript.webp 225w","type":"image/webp","sizes":"(min-width: 225px) 225px, 100vw"}]},"width":225,"height":225}},"publicURL":"/static/ae9e22bc0023fde9b3e0c6fce9db0f0a/typescript.png"}}}}]}},"pageContext":{"slug":"/post/211201/typescript_basic3/"}},
    "staticQueryHashes": []}