{"version":3,"file":"component---src-pages-guest-tsx-8191332eae9e803a7904.js","mappings":"gJAGA,IAaMA,GAAiB,uGAmCvB,IA5ByC,WACrC,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACN,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CACzCC,IA7BA,gCA8BAC,KA7BC,0BA8BD,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGXC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACjDd,EAAWe,aAAaF,EAAKC,MAGjClB,EAAQG,QAAQiB,YAAYhB,MAC7B,KAEI,QAACL,EAAD,CAAmBsB,IAAKrB,M,0FCUnC,UAzBqD,YAUjD,IAAD,IATDsB,KASC,IARCC,KACEC,aAAgBC,EAOnB,EAPmBA,MAAOC,EAO1B,EAP0BA,YAAaC,EAOvC,EAPuCA,QAOvC,IALCC,KACEC,EAIH,EAJGA,UACmBC,EAGtB,EAHGC,gBAAmBD,gBAIvB,OACE,QAAC,IAAD,CACEL,MAAOA,EACPC,YAAaA,EACbM,IAAKL,EACLM,MAAOJ,IAEP,QAAC,IAAD,CAAcK,aAAcJ,KAC5B,QAAC,IAAD,CAAUK,KAAM,WAChB,QAAC,IAAD","sources":["webpack://le2sky-blog/./src/components/Post/CommentWidget.tsx","webpack://le2sky-blog/./src/pages/guest.tsx"],"sourcesContent":["import React, { createRef, FunctionComponent, useEffect } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = \"le2sky/le2sky.github.io\" // 자신 계정의 레포지토리로 설정\r\n\r\ntype UtterancesAttributesType = {\r\n    src: string\r\n    repo: string\r\n    'issue-term': string\r\n    label: string\r\n    theme: string\r\n    crossorigin: string\r\n    async: string\r\n};\r\n\r\nconst UtterancesWrapper = styled.div`\r\n    @media (max-width: 768px) {\r\n        padding: 0 20px;\r\n    }\r\n`\r\n\r\n\r\nconst CommentWidget: FunctionComponent = function () {\r\n    const element = createRef<HTMLDivElement>()\r\n\r\n    useEffect(() => {\r\n        if (element.current === null) return\r\n\r\n        const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n        const attributes: UtterancesAttributesType = {\r\n            src,\r\n            repo,\r\n            'issue-term': 'pathname',\r\n            label: 'Comment',\r\n            theme: `github-light`,\r\n            crossorigin: 'anonymous',\r\n            async: 'true',\r\n        }\r\n\r\n        Object.entries(attributes).forEach(([key, value]) => {\r\n            utterances.setAttribute(key, value)\r\n        })\r\n\r\n        element.current.appendChild(utterances)\r\n    }, [])\r\n\r\n    return <UtterancesWrapper ref={element} />\r\n}\r\n\r\nexport default CommentWidget","import React, { FunctionComponent, useMemo } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport Template from 'components/Common/Template'\r\nimport Introduction from 'components/Main/Introduction'\r\nimport Selector from 'components/Common/Selector'\r\nimport CommentWidget from 'components/Post/CommentWidget'\r\n\r\ntype GuestPageProps = {\r\n  location: {\r\n    search: string\r\n  }\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string\r\n        siteUrl: string\r\n        description: string\r\n      }\r\n    }\r\n    allMarkdownRemark: {\r\n      edges: PostListItemType[]\r\n    }\r\n    file: {\r\n      childImageSharp: {\r\n        gatsbyImageData: IGatsbyImageData\r\n      }\r\n      publicURL: string\r\n    }\r\n  }\r\n}\r\n\r\nconst GuestPage: FunctionComponent<GuestPageProps> = function ({\r\n  data: {\r\n    site: {\r\n      siteMetadata: { title, description, siteUrl },\r\n    },\r\n    file: {\r\n      publicURL,\r\n      childImageSharp: { gatsbyImageData },\r\n    },\r\n  },\r\n}) {\r\n  return (\r\n    <Template\r\n      title={title}\r\n      description={description}\r\n      url={siteUrl}\r\n      image={publicURL}\r\n    >\r\n      <Introduction profileImage={gatsbyImageData} />\r\n      <Selector type={'guest'} />\r\n      <CommentWidget />\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default GuestPage\r\n\r\nexport const getPostList = graphql`\r\n  query getGuestList {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        siteUrl\r\n      }\r\n    }\r\n    file(name: { eq: \"Profile-image\" }) {\r\n      childImageSharp {\r\n        gatsbyImageData(width: 200, height: 200)\r\n      }\r\n      publicURL\r\n    }\r\n  }\r\n`\r\n"],"names":["UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","data","site","siteMetadata","title","description","siteUrl","file","publicURL","gatsbyImageData","childImageSharp","url","image","profileImage","type"],"sourceRoot":""}